/**
  @page ADC_TriggerMode ADC3 conversion using Trigger Mode

  @verbatim
  ******************** (C) COPYRIGHT 2015 STMicroelectronics *******************
  * @file    ADC/ADC_TriggerMode/readme.txt 
  * @author  MCD Application Team
  * @version V1.0.1
  * @date    09-October-2015
  * @brief   Description of the ADC Trigger Mode example.
  ******************************************************************************
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  @endverbatim

@par Example Description 

This example describes how to use the ADC3 and TIM2 to convert continuously data 
from ADC3 with channel ADC_CHANNEL_10.

Each time an external trigger is generated by TIM2 a new conversion is started by ADC3.

At the end of conversion, an interrupt is generated and the converted data of 
ADC3 DR register is affected to the uhADCxConvertedValue variable in the ADC 
conversion complete call back function (HAL_ADC_ConvCpltCallback).

The timer is used to trigger an ADC measure at 20 KHz.

Configuration of the timer to trig an ADC measure at 20 Khz:
  From the reference manual, Reset and Clock control part, Timer 2 is clocked on PCLK1.
  The function SystemClock_Config() configures the clock divider as follows:
  1) The system clock is 180 MHz.
  2) AHB  Prescaler = 1 => AHB clock is 180 MHz.
  3) APB1 Prescaler = 4 => PCLK1 clock is 180 MHz/4 = 45 MHz.
  4) For Timer 2, as APB1 Prescaler = 4, Timer 2 Clock is PCLK1 clock X 2 = 180 MHz/2.
  5) APB2 Prescaler = 2 => PCLK2 clock is 180 MHz/2 = 90 MHz.
  6) For ADC, as ADC Prescaler = 4, ADC Clock is PCLK2 clock / 4 = 22.5 MHz.

  For a 20 Khz frequency, we need (180 MHz/2) / 20 KHz = 4500 clock cycle.
  So, in TIM_Config function, we set the following period: htim.Init.Period = 4500;

Please select PC0 option on JP3 jumper called Potentiometer

The voltage on pin PC.0 (ADC_CHANNEL_10)can vary using the board potentiometer RV1.
The converted value is monitored through debugger: uhADCxConvertedValue variable.

Remark: LED3 is ON when there is an error in initialization.

@note The connection of the LCD reset pin to a dedicated GPIO PK7 instead of the STM32F469 NRST pin may cause residual display on LCD with applications/examples that do not require display.
	  The LCD clear can be ensured by hardware through the board's power off/power on or by software calling the BSP_LCD_Reset() function.

@par Directory contents 

  - ADC/ADC_TriggerMode/Inc/stm32f4xx_hal_conf.h    HAL configuration file
  - ADC/ADC_TriggerMode/Inc/stm32f4xx_it.h          DMA interrupt handlers header file
  - ADC/ADC_TriggerMode/Inc/main.h                  Header for main.c module  
  - ADC/ADC_TriggerMode/Src/stm32f4xx_it.c          DMA interrupt handlers
  - ADC/ADC_TriggerMode/Src/main.c                  Main program
  - ADC/ADC_TriggerMode/Src/stm32f4xx_hal_msp.c     HAL MSP file 
  - ADC/ADC_TriggerMode/Src/system_stm32f4xx.c      STM32F4xx system source file

@par Hardware and Software environment 

  - This example runs on STM32F469xx/STM32F479xx devices.

  - This example has been tested and validated with STM32469I-EVAL revB board and can be
    easily tailored to any other supported device and development board.
  
  - STM32469I-EVAL revB Set-up
    - Use the Potentiometer (RV1) of the Eval board (connected to  PC.0).
    - Make sure that JP3 is fitted in 2-3 positions to use potentiometer.


@par How to use it ? 

In order to make the program work, you must do the following :
 - Open your preferred toolchain 
 - Rebuild all files and load your image into target memory
 - Run the example

 * <h3><center>&copy; COPYRIGHT STMicroelectronics</center></h3>
 */
